// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Schoolable.Models;

namespace Schoolable.Migrations
{
    [DbContext(typeof(SchoolableContext))]
    [Migration("20210521232208_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("CompteRole", b =>
                {
                    b.Property<long>("ComptesId")
                        .HasColumnType("bigint");

                    b.Property<long>("RolesId")
                        .HasColumnType("bigint");

                    b.HasKey("ComptesId", "RolesId");

                    b.HasIndex("RolesId");

                    b.ToTable("CompteRole");
                });

            modelBuilder.Entity("Schoolable.Models.Compte", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedTimestamp")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdateTimestamp")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Comptes");
                });

            modelBuilder.Entity("Schoolable.Models.Departement", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedTimestamp")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<long>("EtablissementId")
                        .HasColumnType("bigint");

                    b.Property<string>("Nom_departement")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdateTimestamp")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("EtablissementId");

                    b.ToTable("Departements");
                });

            modelBuilder.Entity("Schoolable.Models.Etablissement", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedTimestamp")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Nom_etablissement")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Num_reference")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("TypeEtablissementId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdateTimestamp")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("TypeEtablissementId");

                    b.ToTable("Etablissements");
                });

            modelBuilder.Entity("Schoolable.Models.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedTimestamp")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Designation")
                        .HasColumnType("text");

                    b.Property<string>("RoleName")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdateTimestamp")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Schoolable.Models.Salle", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedTimestamp")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<long>("EtablissementId")
                        .HasColumnType("bigint");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdateTimestamp")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("EtablissementId");

                    b.ToTable("Salles");
                });

            modelBuilder.Entity("Schoolable.Models.TypeEtablissement", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedTimestamp")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdateTimestamp")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("TypeEtablissements");
                });

            modelBuilder.Entity("CompteRole", b =>
                {
                    b.HasOne("Schoolable.Models.Compte", null)
                        .WithMany()
                        .HasForeignKey("ComptesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Schoolable.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Schoolable.Models.Departement", b =>
                {
                    b.HasOne("Schoolable.Models.Etablissement", "Etablissement")
                        .WithMany("Departements")
                        .HasForeignKey("EtablissementId");

                    b.Navigation("Etablissement");
                });

            modelBuilder.Entity("Schoolable.Models.Etablissement", b =>
                {
                    b.HasOne("Schoolable.Models.TypeEtablissement", "TypeEtablissement")
                        .WithMany("Etablissements")
                        .HasForeignKey("TypeEtablissementId");

                    b.Navigation("TypeEtablissement");
                });

            modelBuilder.Entity("Schoolable.Models.Salle", b =>
                {
                    b.HasOne("Schoolable.Models.Etablissement", "Etablissement")
                        .WithMany("Salles")
                        .HasForeignKey("EtablissementId");

                    b.Navigation("Etablissement");
                });

            modelBuilder.Entity("Schoolable.Models.Etablissement", b =>
                {
                    b.Navigation("Departements");

                    b.Navigation("Salles");
                });

            modelBuilder.Entity("Schoolable.Models.TypeEtablissement", b =>
                {
                    b.Navigation("Etablissements");
                });
#pragma warning restore 612, 618
        }
    }
}
